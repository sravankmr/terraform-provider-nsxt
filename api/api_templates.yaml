New:
  Convert: |2

        case utl.${type}:
            client = ${client_import}.${api_func_call}
  NoConvert: |2

        case utl.${type}:
            client = ${client_import}.${api_func_call}
  main: |2

    func ${api_func_def} {
        var client interface{}

        switch sessionContext.ClientType {
    ${case_items}
        default:
            return nil
        }
        return &${model_name}ClientContext{Client: client, ClientType: sessionContext.ClientType, ProjectID: sessionContext.ProjectID, VPCID: sessionContext.VPCID}
    }
Get:
  Convert: |2

        case utl.${type}:
            client := c.Client.(${client_import}.${client_name})
            gmObj, err1 := client.${api_func_call}
            if err1 != nil {
                return obj, err1
            }
            var rawObj interface{}            
            rawObj, err = utl.ConvertModelBindingType(gmObj, ${model_import}.${model_name}BindingType(), ${main_model_import}.${model_name}BindingType())
            obj = rawObj.(${main_model_import}.${model_name})
  NoConvert: |2

        case utl.${type}:
            client := c.Client.(${client_import}.${client_name})
            obj, err = client.${api_func_call}
            if err != nil {
                return obj, err
            }
  main: |2

    func ${api_func_def} {
        var obj ${ptr_prefix}${main_model_import}.${model_name}
        var err error

        switch c.ClientType {
    ${case_items}
        default:
            return obj, errors.New("invalid infrastructure for model")
        }
        return obj, err
    }
Patch:
  Convert: |2

        case utl.${type}:
            client := c.Client.(${client_import}.${client_name})
            gmObj, err1 := utl.ConvertModelBindingType(${var_name}, ${main_model_import}.${model_name}BindingType(), ${model_import}.${model_name}BindingType())
            if err1 != nil {
                return err1
            }
            err = client.${api_func_call}
  NoConvert: |2

        case utl.${type}:
            client := c.Client.(${client_import}.${client_name})
            err = client.${api_func_call}
  main: |2

    func ${api_func_def} {
        var err error

        switch c.ClientType {
    ${case_items}
        default:
            err = errors.New("invalid infrastructure for model")
        }
        return err
    }
Update:
  Convert: |2

        case utl.${type}:
            client := c.Client.(${client_import}.${client_name})
            gmObj, err := utl.ConvertModelBindingType(${var_name}, ${main_model_import}.${model_name}BindingType(), ${model_import}.${model_name}BindingType())
            if err != nil {
                return obj, err
            }
            gmObj, err = client.${api_func_call}
            if err != nil {
                return obj, err
            }
            obj1, err1 := utl.ConvertModelBindingType(gmObj, ${model_import}.${model_name}BindingType(), ${main_model_import}.${model_name}BindingType())
            if err1 != nil {
                return obj, err1
            }
            obj = obj1.(${main_model_import}.${model_name})
  NoConvert: |2

        case utl.${type}:
            client := c.Client.(${client_import}.${client_name})
            obj, err = client.${api_func_call}
  main: |2

    func ${api_func_def} {
        var err error
        var obj ${ptr_prefix}${main_model_import}.${model_name}

        switch c.ClientType {
    ${case_items}
        default:
            err = errors.New("invalid infrastructure for model")
        }
        return obj, err
    }
Delete:
  Convert: |2

        case utl.${type}:
            client := c.Client.(${client_import}.${client_name})
            err = client.${api_func_call}
  NoConvert: |2

        case utl.${type}:
            client := c.Client.(${client_import}.${client_name})
            err = client.${api_func_call}
  main: |2

    func ${api_func_def} {
        var err error

        switch c.ClientType {
    ${case_items}
            default:
            err = errors.New("invalid infrastructure for model")
        }
        return err
    }
List:
  Convert: |2

        case utl.${type}:
            client := c.Client.(${client_import}.${client_name})
            gmObj, err := client.${api_func_call}
            if err != nil {
                return obj, err
            }
            obj1, err1 := utl.ConvertModelBindingType(gmObj, ${list_model_import}.${list_result_name}BindingType(), ${list_main_model_import}.${list_result_name}BindingType())
            if err1 != nil {
                return obj, err1
            }
            obj = obj1.(${list_main_model_import}.${list_result_name})
  NoConvert: |2

        case utl.${type}:
            client := c.Client.(${client_import}.${client_name})
            obj, err = client.${api_func_call}
  main: |2

    func ${api_func_def} {
        var err error
        var obj ${list_main_model_import}.${list_result_name}

        switch c.ClientType {
    ${case_items}
        default:
            err = errors.New("invalid infrastructure for model")
        }
        return obj, err
    }

Create:
  Convert: |2
    
        case utl.${type}:
            client := c.Client.(${client_import}.${client_name})
            gmObj, err1 := utl.ConvertModelBindingType(${var_name}, ${main_model_import}.${model_name}BindingType(), ${model_import}.${model_name}BindingType())
            if err1 != nil {
                return err1
            }
            err = client.${api_func_call}
  NoConvert: |2

        case utl.${type}:
            client := c.Client.(${client_import}.${client_name})
            err = client.${api_func_call}
  main: |2

    func ${api_func_def} {
        var err error

        switch c.ClientType {
    ${case_items}
        default:
            err = errors.New("invalid infrastructure for model")
        }
        return err
    }
