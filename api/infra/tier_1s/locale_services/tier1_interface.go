//nolint:revive
package localeservices

// The following file has been autogenerated. Please avoid any changes!
import (
	"errors"

	vapiProtocolClient_ "github.com/vmware/vsphere-automation-sdk-go/runtime/protocol/client"
	client1 "github.com/vmware/vsphere-automation-sdk-go/services/nsxt-gm/global_infra/tier_1s/locale_services"
	model1 "github.com/vmware/vsphere-automation-sdk-go/services/nsxt-gm/model"
	client0 "github.com/vmware/vsphere-automation-sdk-go/services/nsxt/infra/tier_1s/locale_services"
	model0 "github.com/vmware/vsphere-automation-sdk-go/services/nsxt/model"
	client2 "github.com/vmware/vsphere-automation-sdk-go/services/nsxt/orgs/projects/infra/tier_1s/locale_services"

	utl "github.com/vmware/terraform-provider-nsxt/api/utl"
)

type Tier1InterfaceClientContext utl.ClientContext

func NewInterfacesClient(sessionContext utl.SessionContext, connector vapiProtocolClient_.Connector) *Tier1InterfaceClientContext {
	var client interface{}

	switch sessionContext.ClientType {

	case utl.Local:
		client = client0.NewInterfacesClient(connector)

	case utl.Global:
		client = client1.NewInterfacesClient(connector)

	case utl.Multitenancy:
		client = client2.NewInterfacesClient(connector)

	default:
		return nil
	}
	return &Tier1InterfaceClientContext{Client: client, ClientType: sessionContext.ClientType, ProjectID: sessionContext.ProjectID, VPCID: sessionContext.VPCID}
}

func (c Tier1InterfaceClientContext) Get(tier1IdParam string, localeServicesIdParam string, interfaceIdParam string) (model0.Tier1Interface, error) {
	var obj model0.Tier1Interface
	var err error

	switch c.ClientType {

	case utl.Local:
		client := c.Client.(client0.InterfacesClient)
		obj, err = client.Get(tier1IdParam, localeServicesIdParam, interfaceIdParam)
		if err != nil {
			return obj, err
		}

	case utl.Global:
		client := c.Client.(client1.InterfacesClient)
		gmObj, err1 := client.Get(tier1IdParam, localeServicesIdParam, interfaceIdParam)
		if err1 != nil {
			return obj, err1
		}
		var rawObj interface{}
		rawObj, err = utl.ConvertModelBindingType(gmObj, model1.Tier1InterfaceBindingType(), model0.Tier1InterfaceBindingType())
		obj = rawObj.(model0.Tier1Interface)

	case utl.Multitenancy:
		client := c.Client.(client2.InterfacesClient)
		obj, err = client.Get(utl.DefaultOrgID, c.ProjectID, tier1IdParam, localeServicesIdParam, interfaceIdParam)
		if err != nil {
			return obj, err
		}

	default:
		return obj, errors.New("invalid infrastructure for model")
	}
	return obj, err
}

func (c Tier1InterfaceClientContext) Patch(tier1IdParam string, localeServicesIdParam string, interfaceIdParam string, tier1InterfaceParam model0.Tier1Interface) error {
	var err error

	switch c.ClientType {

	case utl.Local:
		client := c.Client.(client0.InterfacesClient)
		err = client.Patch(tier1IdParam, localeServicesIdParam, interfaceIdParam, tier1InterfaceParam)

	case utl.Global:
		client := c.Client.(client1.InterfacesClient)
		gmObj, err1 := utl.ConvertModelBindingType(tier1InterfaceParam, model0.Tier1InterfaceBindingType(), model1.Tier1InterfaceBindingType())
		if err1 != nil {
			return err1
		}
		err = client.Patch(tier1IdParam, localeServicesIdParam, interfaceIdParam, gmObj.(model1.Tier1Interface))

	case utl.Multitenancy:
		client := c.Client.(client2.InterfacesClient)
		err = client.Patch(utl.DefaultOrgID, c.ProjectID, tier1IdParam, localeServicesIdParam, interfaceIdParam, tier1InterfaceParam)

	default:
		err = errors.New("invalid infrastructure for model")
	}
	return err
}

func (c Tier1InterfaceClientContext) Update(tier1IdParam string, localeServicesIdParam string, interfaceIdParam string, tier1InterfaceParam model0.Tier1Interface) (model0.Tier1Interface, error) {
	var err error
	var obj model0.Tier1Interface

	switch c.ClientType {

	case utl.Local:
		client := c.Client.(client0.InterfacesClient)
		obj, err = client.Update(tier1IdParam, localeServicesIdParam, interfaceIdParam, tier1InterfaceParam)

	case utl.Global:
		client := c.Client.(client1.InterfacesClient)
		gmObj, err := utl.ConvertModelBindingType(tier1InterfaceParam, model0.Tier1InterfaceBindingType(), model1.Tier1InterfaceBindingType())
		if err != nil {
			return obj, err
		}
		gmObj, err = client.Update(tier1IdParam, localeServicesIdParam, interfaceIdParam, gmObj.(model1.Tier1Interface))
		if err != nil {
			return obj, err
		}
		obj1, err1 := utl.ConvertModelBindingType(gmObj, model1.Tier1InterfaceBindingType(), model0.Tier1InterfaceBindingType())
		if err1 != nil {
			return obj, err1
		}
		obj = obj1.(model0.Tier1Interface)

	case utl.Multitenancy:
		client := c.Client.(client2.InterfacesClient)
		obj, err = client.Update(utl.DefaultOrgID, c.ProjectID, tier1IdParam, localeServicesIdParam, interfaceIdParam, tier1InterfaceParam)

	default:
		err = errors.New("invalid infrastructure for model")
	}
	return obj, err
}

func (c Tier1InterfaceClientContext) Delete(tier1IdParam string, localeServicesIdParam string, interfaceIdParam string) error {
	var err error

	switch c.ClientType {

	case utl.Local:
		client := c.Client.(client0.InterfacesClient)
		err = client.Delete(tier1IdParam, localeServicesIdParam, interfaceIdParam)

	case utl.Global:
		client := c.Client.(client1.InterfacesClient)
		err = client.Delete(tier1IdParam, localeServicesIdParam, interfaceIdParam)

	case utl.Multitenancy:
		client := c.Client.(client2.InterfacesClient)
		err = client.Delete(utl.DefaultOrgID, c.ProjectID, tier1IdParam, localeServicesIdParam, interfaceIdParam)

	default:
		err = errors.New("invalid infrastructure for model")
	}
	return err
}

func (c Tier1InterfaceClientContext) List(tier1IdParam string, localeServicesIdParam string, cursorParam *string, includeMarkForDeleteObjectsParam *bool, includedFieldsParam *string, pageSizeParam *int64, sortAscendingParam *bool, sortByParam *string) (model0.Tier1InterfaceListResult, error) {
	var err error
	var obj model0.Tier1InterfaceListResult

	switch c.ClientType {

	case utl.Local:
		client := c.Client.(client0.InterfacesClient)
		obj, err = client.List(tier1IdParam, localeServicesIdParam, cursorParam, includeMarkForDeleteObjectsParam, includedFieldsParam, pageSizeParam, sortAscendingParam, sortByParam)

	case utl.Global:
		client := c.Client.(client1.InterfacesClient)
		gmObj, err := client.List(tier1IdParam, localeServicesIdParam, cursorParam, includeMarkForDeleteObjectsParam, includedFieldsParam, pageSizeParam, sortAscendingParam, sortByParam)
		if err != nil {
			return obj, err
		}
		obj1, err1 := utl.ConvertModelBindingType(gmObj, model1.Tier1InterfaceListResultBindingType(), model0.Tier1InterfaceListResultBindingType())
		if err1 != nil {
			return obj, err1
		}
		obj = obj1.(model0.Tier1InterfaceListResult)

	case utl.Multitenancy:
		client := c.Client.(client2.InterfacesClient)
		obj, err = client.List(utl.DefaultOrgID, c.ProjectID, tier1IdParam, localeServicesIdParam, cursorParam, includeMarkForDeleteObjectsParam, includedFieldsParam, pageSizeParam, sortAscendingParam, sortByParam)

	default:
		err = errors.New("invalid infrastructure for model")
	}
	return obj, err
}
