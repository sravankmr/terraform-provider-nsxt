//nolint:revive
package infra

// The following file has been autogenerated. Please avoid any changes!
import (
	"errors"

	vapiProtocolClient_ "github.com/vmware/vsphere-automation-sdk-go/runtime/protocol/client"
	client1 "github.com/vmware/vsphere-automation-sdk-go/services/nsxt-gm/global_infra"
	model1 "github.com/vmware/vsphere-automation-sdk-go/services/nsxt-gm/model"
	client0 "github.com/vmware/vsphere-automation-sdk-go/services/nsxt/infra"
	model0 "github.com/vmware/vsphere-automation-sdk-go/services/nsxt/model"
	client2 "github.com/vmware/vsphere-automation-sdk-go/services/nsxt/orgs/projects/infra"

	utl "github.com/vmware/terraform-provider-nsxt/api/utl"
)

type QosProfileClientContext utl.ClientContext

func NewQosProfilesClient(sessionContext utl.SessionContext, connector vapiProtocolClient_.Connector) *QosProfileClientContext {
	var client interface{}

	switch sessionContext.ClientType {

	case utl.Local:
		client = client0.NewQosProfilesClient(connector)

	case utl.Global:
		client = client1.NewQosProfilesClient(connector)

	case utl.Multitenancy:
		client = client2.NewQosProfilesClient(connector)

	default:
		return nil
	}
	return &QosProfileClientContext{Client: client, ClientType: sessionContext.ClientType, ProjectID: sessionContext.ProjectID, VPCID: sessionContext.VPCID}
}

func (c QosProfileClientContext) Get(qosProfileIdParam string) (model0.QosProfile, error) {
	var obj model0.QosProfile
	var err error

	switch c.ClientType {

	case utl.Local:
		client := c.Client.(client0.QosProfilesClient)
		obj, err = client.Get(qosProfileIdParam)
		if err != nil {
			return obj, err
		}

	case utl.Global:
		client := c.Client.(client1.QosProfilesClient)
		gmObj, err1 := client.Get(qosProfileIdParam)
		if err1 != nil {
			return obj, err1
		}
		var rawObj interface{}
		rawObj, err = utl.ConvertModelBindingType(gmObj, model1.QosProfileBindingType(), model0.QosProfileBindingType())
		obj = rawObj.(model0.QosProfile)

	case utl.Multitenancy:
		client := c.Client.(client2.QosProfilesClient)
		obj, err = client.Get(utl.DefaultOrgID, c.ProjectID, qosProfileIdParam)
		if err != nil {
			return obj, err
		}

	default:
		return obj, errors.New("invalid infrastructure for model")
	}
	return obj, err
}

func (c QosProfileClientContext) Patch(qosProfileIdParam string, qosProfileParam model0.QosProfile, overrideParam *bool) error {
	var err error

	switch c.ClientType {

	case utl.Local:
		client := c.Client.(client0.QosProfilesClient)
		err = client.Patch(qosProfileIdParam, qosProfileParam, overrideParam)

	case utl.Global:
		client := c.Client.(client1.QosProfilesClient)
		gmObj, err1 := utl.ConvertModelBindingType(qosProfileParam, model0.QosProfileBindingType(), model1.QosProfileBindingType())
		if err1 != nil {
			return err1
		}
		err = client.Patch(qosProfileIdParam, gmObj.(model1.QosProfile), overrideParam)

	case utl.Multitenancy:
		client := c.Client.(client2.QosProfilesClient)
		err = client.Patch(utl.DefaultOrgID, c.ProjectID, qosProfileIdParam, qosProfileParam, overrideParam)

	default:
		err = errors.New("invalid infrastructure for model")
	}
	return err
}

func (c QosProfileClientContext) Update(qosProfileIdParam string, qosProfileParam model0.QosProfile, overrideParam *bool) (model0.QosProfile, error) {
	var err error
	var obj model0.QosProfile

	switch c.ClientType {

	case utl.Local:
		client := c.Client.(client0.QosProfilesClient)
		obj, err = client.Update(qosProfileIdParam, qosProfileParam, overrideParam)

	case utl.Global:
		client := c.Client.(client1.QosProfilesClient)
		gmObj, err := utl.ConvertModelBindingType(qosProfileParam, model0.QosProfileBindingType(), model1.QosProfileBindingType())
		if err != nil {
			return obj, err
		}
		gmObj, err = client.Update(qosProfileIdParam, gmObj.(model1.QosProfile), overrideParam)
		if err != nil {
			return obj, err
		}
		obj1, err1 := utl.ConvertModelBindingType(gmObj, model1.QosProfileBindingType(), model0.QosProfileBindingType())
		if err1 != nil {
			return obj, err1
		}
		obj = obj1.(model0.QosProfile)

	case utl.Multitenancy:
		client := c.Client.(client2.QosProfilesClient)
		obj, err = client.Update(utl.DefaultOrgID, c.ProjectID, qosProfileIdParam, qosProfileParam, overrideParam)

	default:
		err = errors.New("invalid infrastructure for model")
	}
	return obj, err
}

func (c QosProfileClientContext) Delete(qosProfileIdParam string, overrideParam *bool) error {
	var err error

	switch c.ClientType {

	case utl.Local:
		client := c.Client.(client0.QosProfilesClient)
		err = client.Delete(qosProfileIdParam, overrideParam)

	case utl.Global:
		client := c.Client.(client1.QosProfilesClient)
		err = client.Delete(qosProfileIdParam, overrideParam)

	case utl.Multitenancy:
		client := c.Client.(client2.QosProfilesClient)
		err = client.Delete(utl.DefaultOrgID, c.ProjectID, qosProfileIdParam, overrideParam)

	default:
		err = errors.New("invalid infrastructure for model")
	}
	return err
}

func (c QosProfileClientContext) List(cursorParam *string, includedFieldsParam *string, pageSizeParam *int64, sortAscendingParam *bool, sortByParam *string) (model0.QosProfileListResult, error) {
	var err error
	var obj model0.QosProfileListResult

	switch c.ClientType {

	case utl.Local:
		client := c.Client.(client0.QosProfilesClient)
		obj, err = client.List(cursorParam, includedFieldsParam, pageSizeParam, sortAscendingParam, sortByParam)

	case utl.Global:
		client := c.Client.(client1.QosProfilesClient)
		gmObj, err := client.List(cursorParam, includedFieldsParam, pageSizeParam, sortAscendingParam, sortByParam)
		if err != nil {
			return obj, err
		}
		obj1, err1 := utl.ConvertModelBindingType(gmObj, model1.QosProfileListResultBindingType(), model0.QosProfileListResultBindingType())
		if err1 != nil {
			return obj, err1
		}
		obj = obj1.(model0.QosProfileListResult)

	case utl.Multitenancy:
		client := c.Client.(client2.QosProfilesClient)
		obj, err = client.List(utl.DefaultOrgID, c.ProjectID, cursorParam, includedFieldsParam, pageSizeParam, sortAscendingParam, sortByParam)

	default:
		err = errors.New("invalid infrastructure for model")
	}
	return obj, err
}
