//nolint:revive
package domains

// The following file has been autogenerated. Please avoid any changes!
import (
	"errors"

	vapiProtocolClient_ "github.com/vmware/vsphere-automation-sdk-go/runtime/protocol/client"
	client1 "github.com/vmware/vsphere-automation-sdk-go/services/nsxt-gm/global_infra/domains"
	model1 "github.com/vmware/vsphere-automation-sdk-go/services/nsxt-gm/model"
	client0 "github.com/vmware/vsphere-automation-sdk-go/services/nsxt/infra/domains"
	model0 "github.com/vmware/vsphere-automation-sdk-go/services/nsxt/model"
	client2 "github.com/vmware/vsphere-automation-sdk-go/services/nsxt/orgs/projects/infra/domains"
	client3 "github.com/vmware/vsphere-automation-sdk-go/services/nsxt/orgs/projects/vpcs"

	utl "github.com/vmware/terraform-provider-nsxt/api/utl"
)

type SecurityPolicyClientContext utl.ClientContext

func NewSecurityPoliciesClient(sessionContext utl.SessionContext, connector vapiProtocolClient_.Connector) *SecurityPolicyClientContext {
	var client interface{}

	switch sessionContext.ClientType {

	case utl.Local:
		client = client0.NewSecurityPoliciesClient(connector)

	case utl.Global:
		client = client1.NewSecurityPoliciesClient(connector)

	case utl.Multitenancy:
		client = client2.NewSecurityPoliciesClient(connector)

	case utl.VPC:
		client = client3.NewSecurityPoliciesClient(connector)

	default:
		return nil
	}
	return &SecurityPolicyClientContext{Client: client, ClientType: sessionContext.ClientType, ProjectID: sessionContext.ProjectID, VPCID: sessionContext.VPCID}
}

func (c SecurityPolicyClientContext) Get(domainIdParam string, securityPolicyIdParam string) (model0.SecurityPolicy, error) {
	var obj model0.SecurityPolicy
	var err error

	switch c.ClientType {

	case utl.Local:
		client := c.Client.(client0.SecurityPoliciesClient)
		obj, err = client.Get(domainIdParam, securityPolicyIdParam)
		if err != nil {
			return obj, err
		}

	case utl.Global:
		client := c.Client.(client1.SecurityPoliciesClient)
		gmObj, err1 := client.Get(domainIdParam, securityPolicyIdParam)
		if err1 != nil {
			return obj, err1
		}
		var rawObj interface{}
		rawObj, err = utl.ConvertModelBindingType(gmObj, model1.SecurityPolicyBindingType(), model0.SecurityPolicyBindingType())
		obj = rawObj.(model0.SecurityPolicy)

	case utl.Multitenancy:
		client := c.Client.(client2.SecurityPoliciesClient)
		obj, err = client.Get(utl.DefaultOrgID, c.ProjectID, domainIdParam, securityPolicyIdParam)
		if err != nil {
			return obj, err
		}

	case utl.VPC:
		client := c.Client.(client3.SecurityPoliciesClient)
		obj, err = client.Get(utl.DefaultOrgID, c.ProjectID, c.VPCID, securityPolicyIdParam)
		if err != nil {
			return obj, err
		}

	default:
		return obj, errors.New("invalid infrastructure for model")
	}
	return obj, err
}

func (c SecurityPolicyClientContext) Patch(domainIdParam string, securityPolicyIdParam string, securityPolicyParam model0.SecurityPolicy) error {
	var err error

	switch c.ClientType {

	case utl.Local:
		client := c.Client.(client0.SecurityPoliciesClient)
		err = client.Patch(domainIdParam, securityPolicyIdParam, securityPolicyParam)

	case utl.Global:
		client := c.Client.(client1.SecurityPoliciesClient)
		gmObj, err1 := utl.ConvertModelBindingType(securityPolicyParam, model0.SecurityPolicyBindingType(), model1.SecurityPolicyBindingType())
		if err1 != nil {
			return err1
		}
		err = client.Patch(domainIdParam, securityPolicyIdParam, gmObj.(model1.SecurityPolicy))

	case utl.Multitenancy:
		client := c.Client.(client2.SecurityPoliciesClient)
		err = client.Patch(utl.DefaultOrgID, c.ProjectID, domainIdParam, securityPolicyIdParam, securityPolicyParam)

	case utl.VPC:
		client := c.Client.(client3.SecurityPoliciesClient)
		err = client.Patch(utl.DefaultOrgID, c.ProjectID, c.VPCID, securityPolicyIdParam, securityPolicyParam)

	default:
		err = errors.New("invalid infrastructure for model")
	}
	return err
}

func (c SecurityPolicyClientContext) Update(domainIdParam string, securityPolicyIdParam string, securityPolicyParam model0.SecurityPolicy) (model0.SecurityPolicy, error) {
	var err error
	var obj model0.SecurityPolicy

	switch c.ClientType {

	case utl.Local:
		client := c.Client.(client0.SecurityPoliciesClient)
		obj, err = client.Update(domainIdParam, securityPolicyIdParam, securityPolicyParam)

	case utl.Global:
		client := c.Client.(client1.SecurityPoliciesClient)
		gmObj, err := utl.ConvertModelBindingType(securityPolicyParam, model0.SecurityPolicyBindingType(), model1.SecurityPolicyBindingType())
		if err != nil {
			return obj, err
		}
		gmObj, err = client.Update(domainIdParam, securityPolicyIdParam, gmObj.(model1.SecurityPolicy))
		if err != nil {
			return obj, err
		}
		obj1, err1 := utl.ConvertModelBindingType(gmObj, model1.SecurityPolicyBindingType(), model0.SecurityPolicyBindingType())
		if err1 != nil {
			return obj, err1
		}
		obj = obj1.(model0.SecurityPolicy)

	case utl.Multitenancy:
		client := c.Client.(client2.SecurityPoliciesClient)
		obj, err = client.Update(utl.DefaultOrgID, c.ProjectID, domainIdParam, securityPolicyIdParam, securityPolicyParam)

	case utl.VPC:
		client := c.Client.(client3.SecurityPoliciesClient)
		obj, err = client.Update(utl.DefaultOrgID, c.ProjectID, c.VPCID, securityPolicyIdParam, securityPolicyParam)

	default:
		err = errors.New("invalid infrastructure for model")
	}
	return obj, err
}

func (c SecurityPolicyClientContext) Delete(domainIdParam string, securityPolicyIdParam string) error {
	var err error

	switch c.ClientType {

	case utl.Local:
		client := c.Client.(client0.SecurityPoliciesClient)
		err = client.Delete(domainIdParam, securityPolicyIdParam)

	case utl.Global:
		client := c.Client.(client1.SecurityPoliciesClient)
		err = client.Delete(domainIdParam, securityPolicyIdParam)

	case utl.Multitenancy:
		client := c.Client.(client2.SecurityPoliciesClient)
		err = client.Delete(utl.DefaultOrgID, c.ProjectID, domainIdParam, securityPolicyIdParam)

	case utl.VPC:
		client := c.Client.(client3.SecurityPoliciesClient)
		err = client.Delete(utl.DefaultOrgID, c.ProjectID, c.VPCID, securityPolicyIdParam)

	default:
		err = errors.New("invalid infrastructure for model")
	}
	return err
}

func (c SecurityPolicyClientContext) List(domainIdParam string, cursorParam *string, includeMarkForDeleteObjectsParam *bool, includeRuleCountParam *bool, includedFieldsParam *string, pageSizeParam *int64, sortAscendingParam *bool, sortByParam *string) (model0.SecurityPolicyListResult, error) {
	var err error
	var obj model0.SecurityPolicyListResult

	switch c.ClientType {

	case utl.Local:
		client := c.Client.(client0.SecurityPoliciesClient)
		obj, err = client.List(domainIdParam, cursorParam, includeMarkForDeleteObjectsParam, includeRuleCountParam, includedFieldsParam, pageSizeParam, sortAscendingParam, sortByParam)

	case utl.Global:
		client := c.Client.(client1.SecurityPoliciesClient)
		gmObj, err := client.List(domainIdParam, cursorParam, includeMarkForDeleteObjectsParam, includeRuleCountParam, includedFieldsParam, pageSizeParam, sortAscendingParam, sortByParam)
		if err != nil {
			return obj, err
		}
		obj1, err1 := utl.ConvertModelBindingType(gmObj, model1.SecurityPolicyListResultBindingType(), model0.SecurityPolicyListResultBindingType())
		if err1 != nil {
			return obj, err1
		}
		obj = obj1.(model0.SecurityPolicyListResult)

	case utl.Multitenancy:
		client := c.Client.(client2.SecurityPoliciesClient)
		obj, err = client.List(utl.DefaultOrgID, c.ProjectID, domainIdParam, cursorParam, includeMarkForDeleteObjectsParam, includeRuleCountParam, includedFieldsParam, pageSizeParam, sortAscendingParam, sortByParam)

	case utl.VPC:
		client := c.Client.(client3.SecurityPoliciesClient)
		obj, err = client.List(utl.DefaultOrgID, c.ProjectID, c.VPCID, cursorParam, includeMarkForDeleteObjectsParam, includeRuleCountParam, includedFieldsParam, pageSizeParam, sortAscendingParam, sortByParam)

	default:
		err = errors.New("invalid infrastructure for model")
	}
	return obj, err
}
