//nolint:revive
package tier0s

// The following file has been autogenerated. Please avoid any changes!
import (
	"errors"

	vapiProtocolClient_ "github.com/vmware/vsphere-automation-sdk-go/runtime/protocol/client"
	client1 "github.com/vmware/vsphere-automation-sdk-go/services/nsxt-gm/global_infra/tier_0s"
	model1 "github.com/vmware/vsphere-automation-sdk-go/services/nsxt-gm/model"
	client0 "github.com/vmware/vsphere-automation-sdk-go/services/nsxt/infra/tier_0s"
	model0 "github.com/vmware/vsphere-automation-sdk-go/services/nsxt/model"

	utl "github.com/vmware/terraform-provider-nsxt/api/utl"
)

type PolicyDnsForwarderClientContext utl.ClientContext

func NewDnsForwarderClient(sessionContext utl.SessionContext, connector vapiProtocolClient_.Connector) *PolicyDnsForwarderClientContext {
	var client interface{}

	switch sessionContext.ClientType {

	case utl.Local:
		client = client0.NewDnsForwarderClient(connector)

	case utl.Global:
		client = client1.NewDnsForwarderClient(connector)

	default:
		return nil
	}
	return &PolicyDnsForwarderClientContext{Client: client, ClientType: sessionContext.ClientType, ProjectID: sessionContext.ProjectID, VPCID: sessionContext.VPCID}
}

func (c PolicyDnsForwarderClientContext) Get(tier0IdParam string) (model0.PolicyDnsForwarder, error) {
	var obj model0.PolicyDnsForwarder
	var err error

	switch c.ClientType {

	case utl.Local:
		client := c.Client.(client0.DnsForwarderClient)
		obj, err = client.Get(tier0IdParam)
		if err != nil {
			return obj, err
		}

	case utl.Global:
		client := c.Client.(client1.DnsForwarderClient)
		gmObj, err1 := client.Get(tier0IdParam)
		if err1 != nil {
			return obj, err1
		}
		var rawObj interface{}
		rawObj, err = utl.ConvertModelBindingType(gmObj, model1.PolicyDnsForwarderBindingType(), model0.PolicyDnsForwarderBindingType())
		obj = rawObj.(model0.PolicyDnsForwarder)

	default:
		return obj, errors.New("invalid infrastructure for model")
	}
	return obj, err
}

func (c PolicyDnsForwarderClientContext) Patch(tier0IdParam string, policyDnsForwarderParam model0.PolicyDnsForwarder) error {
	var err error

	switch c.ClientType {

	case utl.Local:
		client := c.Client.(client0.DnsForwarderClient)
		err = client.Patch(tier0IdParam, policyDnsForwarderParam)

	case utl.Global:
		client := c.Client.(client1.DnsForwarderClient)
		gmObj, err1 := utl.ConvertModelBindingType(policyDnsForwarderParam, model0.PolicyDnsForwarderBindingType(), model1.PolicyDnsForwarderBindingType())
		if err1 != nil {
			return err1
		}
		err = client.Patch(tier0IdParam, gmObj.(model1.PolicyDnsForwarder))

	default:
		err = errors.New("invalid infrastructure for model")
	}
	return err
}

func (c PolicyDnsForwarderClientContext) Update(tier0IdParam string, policyDnsForwarderParam model0.PolicyDnsForwarder) (model0.PolicyDnsForwarder, error) {
	var err error
	var obj model0.PolicyDnsForwarder

	switch c.ClientType {

	case utl.Local:
		client := c.Client.(client0.DnsForwarderClient)
		obj, err = client.Update(tier0IdParam, policyDnsForwarderParam)

	case utl.Global:
		client := c.Client.(client1.DnsForwarderClient)
		gmObj, err := utl.ConvertModelBindingType(policyDnsForwarderParam, model0.PolicyDnsForwarderBindingType(), model1.PolicyDnsForwarderBindingType())
		if err != nil {
			return obj, err
		}
		gmObj, err = client.Update(tier0IdParam, gmObj.(model1.PolicyDnsForwarder))
		if err != nil {
			return obj, err
		}
		obj1, err1 := utl.ConvertModelBindingType(gmObj, model1.PolicyDnsForwarderBindingType(), model0.PolicyDnsForwarderBindingType())
		if err1 != nil {
			return obj, err1
		}
		obj = obj1.(model0.PolicyDnsForwarder)

	default:
		err = errors.New("invalid infrastructure for model")
	}
	return obj, err
}

func (c PolicyDnsForwarderClientContext) Delete(tier0IdParam string) error {
	var err error

	switch c.ClientType {

	case utl.Local:
		client := c.Client.(client0.DnsForwarderClient)
		err = client.Delete(tier0IdParam)

	case utl.Global:
		client := c.Client.(client1.DnsForwarderClient)
		err = client.Delete(tier0IdParam)

	default:
		err = errors.New("invalid infrastructure for model")
	}
	return err
}
