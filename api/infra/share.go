//nolint:revive
package infra

// The following file has been autogenerated. Please avoid any changes!
import (
	"errors"

	vapiProtocolClient_ "github.com/vmware/vsphere-automation-sdk-go/runtime/protocol/client"
	client0 "github.com/vmware/vsphere-automation-sdk-go/services/nsxt/infra"
	model0 "github.com/vmware/vsphere-automation-sdk-go/services/nsxt/model"
	client1 "github.com/vmware/vsphere-automation-sdk-go/services/nsxt/orgs/projects/infra"

	utl "github.com/vmware/terraform-provider-nsxt/api/utl"
)

type ShareClientContext utl.ClientContext

func NewSharesClient(sessionContext utl.SessionContext, connector vapiProtocolClient_.Connector) *ShareClientContext {
	var client interface{}

	switch sessionContext.ClientType {

	case utl.Local:
		client = client0.NewSharesClient(connector)

	case utl.Multitenancy:
		client = client1.NewSharesClient(connector)

	default:
		return nil
	}
	return &ShareClientContext{Client: client, ClientType: sessionContext.ClientType, ProjectID: sessionContext.ProjectID, VPCID: sessionContext.VPCID}
}

func (c ShareClientContext) Get(shareIdParam string) (model0.Share, error) {
	var obj model0.Share
	var err error

	switch c.ClientType {

	case utl.Local:
		client := c.Client.(client0.SharesClient)
		obj, err = client.Get(shareIdParam)
		if err != nil {
			return obj, err
		}

	case utl.Multitenancy:
		client := c.Client.(client1.SharesClient)
		obj, err = client.Get(utl.DefaultOrgID, c.ProjectID, shareIdParam)
		if err != nil {
			return obj, err
		}

	default:
		return obj, errors.New("invalid infrastructure for model")
	}
	return obj, err
}

func (c ShareClientContext) Delete(shareIdParam string) error {
	var err error

	switch c.ClientType {

	case utl.Local:
		client := c.Client.(client0.SharesClient)
		err = client.Delete(shareIdParam)

	case utl.Multitenancy:
		client := c.Client.(client1.SharesClient)
		err = client.Delete(utl.DefaultOrgID, c.ProjectID, shareIdParam)

	default:
		err = errors.New("invalid infrastructure for model")
	}
	return err
}

func (c ShareClientContext) Patch(shareIdParam string, shareParam model0.Share) error {
	var err error

	switch c.ClientType {

	case utl.Local:
		client := c.Client.(client0.SharesClient)
		err = client.Patch(shareIdParam, shareParam)

	case utl.Multitenancy:
		client := c.Client.(client1.SharesClient)
		err = client.Patch(utl.DefaultOrgID, c.ProjectID, shareIdParam, shareParam)

	default:
		err = errors.New("invalid infrastructure for model")
	}
	return err
}

func (c ShareClientContext) Update(shareIdParam string, shareParam model0.Share) (model0.Share, error) {
	var err error
	var obj model0.Share

	switch c.ClientType {

	case utl.Local:
		client := c.Client.(client0.SharesClient)
		obj, err = client.Update(shareIdParam, shareParam)

	case utl.Multitenancy:
		client := c.Client.(client1.SharesClient)
		obj, err = client.Update(utl.DefaultOrgID, c.ProjectID, shareIdParam, shareParam)

	default:
		err = errors.New("invalid infrastructure for model")
	}
	return obj, err
}
