//nolint:revive
package shares

// The following file has been autogenerated. Please avoid any changes!
import (
	"errors"

	vapiProtocolClient_ "github.com/vmware/vsphere-automation-sdk-go/runtime/protocol/client"
	client0 "github.com/vmware/vsphere-automation-sdk-go/services/nsxt/infra/shares"
	model0 "github.com/vmware/vsphere-automation-sdk-go/services/nsxt/model"
	client1 "github.com/vmware/vsphere-automation-sdk-go/services/nsxt/orgs/projects/infra/shares"

	utl "github.com/vmware/terraform-provider-nsxt/api/utl"
)

type SharedResourceClientContext utl.ClientContext

func NewResourcesClient(sessionContext utl.SessionContext, connector vapiProtocolClient_.Connector) *SharedResourceClientContext {
	var client interface{}

	switch sessionContext.ClientType {

	case utl.Local:
		client = client0.NewResourcesClient(connector)

	case utl.Multitenancy:
		client = client1.NewResourcesClient(connector)

	default:
		return nil
	}
	return &SharedResourceClientContext{Client: client, ClientType: sessionContext.ClientType, ProjectID: sessionContext.ProjectID, VPCID: sessionContext.VPCID}
}

func (c SharedResourceClientContext) Get(shareIdParam string, sharedResourceIdParam string) (model0.SharedResource, error) {
	var obj model0.SharedResource
	var err error

	switch c.ClientType {

	case utl.Local:
		client := c.Client.(client0.ResourcesClient)
		obj, err = client.Get(shareIdParam, sharedResourceIdParam)
		if err != nil {
			return obj, err
		}

	case utl.Multitenancy:
		client := c.Client.(client1.ResourcesClient)
		obj, err = client.Get(utl.DefaultOrgID, c.ProjectID, shareIdParam, sharedResourceIdParam)
		if err != nil {
			return obj, err
		}

	default:
		return obj, errors.New("invalid infrastructure for model")
	}
	return obj, err
}

func (c SharedResourceClientContext) Delete(shareIdParam string, sharedResourceIdParam string) error {
	var err error

	switch c.ClientType {

	case utl.Local:
		client := c.Client.(client0.ResourcesClient)
		err = client.Delete(shareIdParam, sharedResourceIdParam)

	case utl.Multitenancy:
		client := c.Client.(client1.ResourcesClient)
		err = client.Delete(utl.DefaultOrgID, c.ProjectID, shareIdParam, sharedResourceIdParam)

	default:
		err = errors.New("invalid infrastructure for model")
	}
	return err
}

func (c SharedResourceClientContext) Patch(shareIdParam string, sharedResourceIdParam string, sharedResourceParam model0.SharedResource) error {
	var err error

	switch c.ClientType {

	case utl.Local:
		client := c.Client.(client0.ResourcesClient)
		err = client.Patch(shareIdParam, sharedResourceIdParam, sharedResourceParam)

	case utl.Multitenancy:
		client := c.Client.(client1.ResourcesClient)
		err = client.Patch(utl.DefaultOrgID, c.ProjectID, shareIdParam, sharedResourceIdParam, sharedResourceParam)

	default:
		err = errors.New("invalid infrastructure for model")
	}
	return err
}

func (c SharedResourceClientContext) Update(shareIdParam string, sharedResourceIdParam string, sharedResourceParam model0.SharedResource) (model0.SharedResource, error) {
	var err error
	var obj model0.SharedResource

	switch c.ClientType {

	case utl.Local:
		client := c.Client.(client0.ResourcesClient)
		obj, err = client.Update(shareIdParam, sharedResourceIdParam, sharedResourceParam)

	case utl.Multitenancy:
		client := c.Client.(client1.ResourcesClient)
		obj, err = client.Update(utl.DefaultOrgID, c.ProjectID, shareIdParam, sharedResourceIdParam, sharedResourceParam)

	default:
		err = errors.New("invalid infrastructure for model")
	}
	return obj, err
}
