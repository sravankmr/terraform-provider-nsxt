//nolint:revive
package infra

// The following file has been autogenerated. Please avoid any changes!
import (
	"errors"

	vapiProtocolClient_ "github.com/vmware/vsphere-automation-sdk-go/runtime/protocol/client"
	client1 "github.com/vmware/vsphere-automation-sdk-go/services/nsxt-gm/global_infra"
	model1 "github.com/vmware/vsphere-automation-sdk-go/services/nsxt-gm/model"
	client0 "github.com/vmware/vsphere-automation-sdk-go/services/nsxt/infra"
	model0 "github.com/vmware/vsphere-automation-sdk-go/services/nsxt/model"
	client2 "github.com/vmware/vsphere-automation-sdk-go/services/nsxt/orgs/projects/infra"

	utl "github.com/vmware/terraform-provider-nsxt/api/utl"
)

type IPDiscoveryProfileClientContext utl.ClientContext

func NewIpDiscoveryProfilesClient(sessionContext utl.SessionContext, connector vapiProtocolClient_.Connector) *IPDiscoveryProfileClientContext {
	var client interface{}

	switch sessionContext.ClientType {

	case utl.Local:
		client = client0.NewIpDiscoveryProfilesClient(connector)

	case utl.Global:
		client = client1.NewIpDiscoveryProfilesClient(connector)

	case utl.Multitenancy:
		client = client2.NewIpDiscoveryProfilesClient(connector)

	default:
		return nil
	}
	return &IPDiscoveryProfileClientContext{Client: client, ClientType: sessionContext.ClientType, ProjectID: sessionContext.ProjectID, VPCID: sessionContext.VPCID}
}

func (c IPDiscoveryProfileClientContext) Get(ipDiscoveryProfileIdParam string) (model0.IPDiscoveryProfile, error) {
	var obj model0.IPDiscoveryProfile
	var err error

	switch c.ClientType {

	case utl.Local:
		client := c.Client.(client0.IpDiscoveryProfilesClient)
		obj, err = client.Get(ipDiscoveryProfileIdParam)
		if err != nil {
			return obj, err
		}

	case utl.Global:
		client := c.Client.(client1.IpDiscoveryProfilesClient)
		gmObj, err1 := client.Get(ipDiscoveryProfileIdParam)
		if err1 != nil {
			return obj, err1
		}
		var rawObj interface{}
		rawObj, err = utl.ConvertModelBindingType(gmObj, model1.IPDiscoveryProfileBindingType(), model0.IPDiscoveryProfileBindingType())
		obj = rawObj.(model0.IPDiscoveryProfile)

	case utl.Multitenancy:
		client := c.Client.(client2.IpDiscoveryProfilesClient)
		obj, err = client.Get(utl.DefaultOrgID, c.ProjectID, ipDiscoveryProfileIdParam)
		if err != nil {
			return obj, err
		}

	default:
		return obj, errors.New("invalid infrastructure for model")
	}
	return obj, err
}

func (c IPDiscoveryProfileClientContext) Patch(ipDiscoveryProfileIdParam string, ipDiscoveryProfileParam model0.IPDiscoveryProfile, overrideParam *bool) error {
	var err error

	switch c.ClientType {

	case utl.Local:
		client := c.Client.(client0.IpDiscoveryProfilesClient)
		err = client.Patch(ipDiscoveryProfileIdParam, ipDiscoveryProfileParam, overrideParam)

	case utl.Global:
		client := c.Client.(client1.IpDiscoveryProfilesClient)
		gmObj, err1 := utl.ConvertModelBindingType(ipDiscoveryProfileParam, model0.IPDiscoveryProfileBindingType(), model1.IPDiscoveryProfileBindingType())
		if err1 != nil {
			return err1
		}
		err = client.Patch(ipDiscoveryProfileIdParam, gmObj.(model1.IPDiscoveryProfile), overrideParam)

	case utl.Multitenancy:
		client := c.Client.(client2.IpDiscoveryProfilesClient)
		err = client.Patch(utl.DefaultOrgID, c.ProjectID, ipDiscoveryProfileIdParam, ipDiscoveryProfileParam, overrideParam)

	default:
		err = errors.New("invalid infrastructure for model")
	}
	return err
}

func (c IPDiscoveryProfileClientContext) Update(ipDiscoveryProfileIdParam string, ipDiscoveryProfileParam model0.IPDiscoveryProfile, overrideParam *bool) (model0.IPDiscoveryProfile, error) {
	var err error
	var obj model0.IPDiscoveryProfile

	switch c.ClientType {

	case utl.Local:
		client := c.Client.(client0.IpDiscoveryProfilesClient)
		obj, err = client.Update(ipDiscoveryProfileIdParam, ipDiscoveryProfileParam, overrideParam)

	case utl.Global:
		client := c.Client.(client1.IpDiscoveryProfilesClient)
		gmObj, err := utl.ConvertModelBindingType(ipDiscoveryProfileParam, model0.IPDiscoveryProfileBindingType(), model1.IPDiscoveryProfileBindingType())
		if err != nil {
			return obj, err
		}
		gmObj, err = client.Update(ipDiscoveryProfileIdParam, gmObj.(model1.IPDiscoveryProfile), overrideParam)
		if err != nil {
			return obj, err
		}
		obj1, err1 := utl.ConvertModelBindingType(gmObj, model1.IPDiscoveryProfileBindingType(), model0.IPDiscoveryProfileBindingType())
		if err1 != nil {
			return obj, err1
		}
		obj = obj1.(model0.IPDiscoveryProfile)

	case utl.Multitenancy:
		client := c.Client.(client2.IpDiscoveryProfilesClient)
		obj, err = client.Update(utl.DefaultOrgID, c.ProjectID, ipDiscoveryProfileIdParam, ipDiscoveryProfileParam, overrideParam)

	default:
		err = errors.New("invalid infrastructure for model")
	}
	return obj, err
}

func (c IPDiscoveryProfileClientContext) Delete(ipDiscoveryProfileIdParam string, overrideParam *bool) error {
	var err error

	switch c.ClientType {

	case utl.Local:
		client := c.Client.(client0.IpDiscoveryProfilesClient)
		err = client.Delete(ipDiscoveryProfileIdParam, overrideParam)

	case utl.Global:
		client := c.Client.(client1.IpDiscoveryProfilesClient)
		err = client.Delete(ipDiscoveryProfileIdParam, overrideParam)

	case utl.Multitenancy:
		client := c.Client.(client2.IpDiscoveryProfilesClient)
		err = client.Delete(utl.DefaultOrgID, c.ProjectID, ipDiscoveryProfileIdParam, overrideParam)

	default:
		err = errors.New("invalid infrastructure for model")
	}
	return err
}

func (c IPDiscoveryProfileClientContext) List(cursorParam *string, includeMarkForDeleteObjectsParam *bool, includedFieldsParam *string, pageSizeParam *int64, sortAscendingParam *bool, sortByParam *string) (model0.IPDiscoveryProfileListResult, error) {
	var err error
	var obj model0.IPDiscoveryProfileListResult

	switch c.ClientType {

	case utl.Local:
		client := c.Client.(client0.IpDiscoveryProfilesClient)
		obj, err = client.List(cursorParam, includeMarkForDeleteObjectsParam, includedFieldsParam, pageSizeParam, sortAscendingParam, sortByParam)

	case utl.Global:
		client := c.Client.(client1.IpDiscoveryProfilesClient)
		gmObj, err := client.List(cursorParam, includeMarkForDeleteObjectsParam, includedFieldsParam, pageSizeParam, sortAscendingParam, sortByParam)
		if err != nil {
			return obj, err
		}
		obj1, err1 := utl.ConvertModelBindingType(gmObj, model1.IPDiscoveryProfileListResultBindingType(), model0.IPDiscoveryProfileListResultBindingType())
		if err1 != nil {
			return obj, err1
		}
		obj = obj1.(model0.IPDiscoveryProfileListResult)

	case utl.Multitenancy:
		client := c.Client.(client2.IpDiscoveryProfilesClient)
		obj, err = client.List(utl.DefaultOrgID, c.ProjectID, cursorParam, includeMarkForDeleteObjectsParam, includedFieldsParam, pageSizeParam, sortAscendingParam, sortByParam)

	default:
		err = errors.New("invalid infrastructure for model")
	}
	return obj, err
}
