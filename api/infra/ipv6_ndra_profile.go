//nolint:revive
package infra

// The following file has been autogenerated. Please avoid any changes!
import (
	"errors"

	vapiProtocolClient_ "github.com/vmware/vsphere-automation-sdk-go/runtime/protocol/client"
	client1 "github.com/vmware/vsphere-automation-sdk-go/services/nsxt-gm/global_infra"
	model1 "github.com/vmware/vsphere-automation-sdk-go/services/nsxt-gm/model"
	client0 "github.com/vmware/vsphere-automation-sdk-go/services/nsxt/infra"
	model0 "github.com/vmware/vsphere-automation-sdk-go/services/nsxt/model"
	client2 "github.com/vmware/vsphere-automation-sdk-go/services/nsxt/orgs/projects/infra"

	utl "github.com/vmware/terraform-provider-nsxt/api/utl"
)

type Ipv6NdraProfileClientContext utl.ClientContext

func NewIpv6NdraProfilesClient(sessionContext utl.SessionContext, connector vapiProtocolClient_.Connector) *Ipv6NdraProfileClientContext {
	var client interface{}

	switch sessionContext.ClientType {

	case utl.Local:
		client = client0.NewIpv6NdraProfilesClient(connector)

	case utl.Global:
		client = client1.NewIpv6NdraProfilesClient(connector)

	case utl.Multitenancy:
		client = client2.NewIpv6NdraProfilesClient(connector)

	default:
		return nil
	}
	return &Ipv6NdraProfileClientContext{Client: client, ClientType: sessionContext.ClientType, ProjectID: sessionContext.ProjectID, VPCID: sessionContext.VPCID}
}

func (c Ipv6NdraProfileClientContext) Get(ndraProfileIdParam string) (model0.Ipv6NdraProfile, error) {
	var obj model0.Ipv6NdraProfile
	var err error

	switch c.ClientType {

	case utl.Local:
		client := c.Client.(client0.Ipv6NdraProfilesClient)
		obj, err = client.Get(ndraProfileIdParam)
		if err != nil {
			return obj, err
		}

	case utl.Global:
		client := c.Client.(client1.Ipv6NdraProfilesClient)
		gmObj, err1 := client.Get(ndraProfileIdParam)
		if err1 != nil {
			return obj, err1
		}
		var rawObj interface{}
		rawObj, err = utl.ConvertModelBindingType(gmObj, model1.Ipv6NdraProfileBindingType(), model0.Ipv6NdraProfileBindingType())
		obj = rawObj.(model0.Ipv6NdraProfile)

	case utl.Multitenancy:
		client := c.Client.(client2.Ipv6NdraProfilesClient)
		obj, err = client.Get(utl.DefaultOrgID, c.ProjectID, ndraProfileIdParam)
		if err != nil {
			return obj, err
		}

	default:
		return obj, errors.New("invalid infrastructure for model")
	}
	return obj, err
}

func (c Ipv6NdraProfileClientContext) Patch(ndraProfileIdParam string, ipv6NdraProfileParam model0.Ipv6NdraProfile, overrideParam *bool) error {
	var err error

	switch c.ClientType {

	case utl.Local:
		client := c.Client.(client0.Ipv6NdraProfilesClient)
		err = client.Patch(ndraProfileIdParam, ipv6NdraProfileParam, overrideParam)

	case utl.Global:
		client := c.Client.(client1.Ipv6NdraProfilesClient)
		gmObj, err1 := utl.ConvertModelBindingType(ipv6NdraProfileParam, model0.Ipv6NdraProfileBindingType(), model1.Ipv6NdraProfileBindingType())
		if err1 != nil {
			return err1
		}
		err = client.Patch(ndraProfileIdParam, gmObj.(model1.Ipv6NdraProfile), overrideParam)

	case utl.Multitenancy:
		client := c.Client.(client2.Ipv6NdraProfilesClient)
		err = client.Patch(utl.DefaultOrgID, c.ProjectID, ndraProfileIdParam, ipv6NdraProfileParam, overrideParam)

	default:
		err = errors.New("invalid infrastructure for model")
	}
	return err
}

func (c Ipv6NdraProfileClientContext) Update(ndraProfileIdParam string, ipv6NdraProfileParam model0.Ipv6NdraProfile, overrideParam *bool) (model0.Ipv6NdraProfile, error) {
	var err error
	var obj model0.Ipv6NdraProfile

	switch c.ClientType {

	case utl.Local:
		client := c.Client.(client0.Ipv6NdraProfilesClient)
		obj, err = client.Update(ndraProfileIdParam, ipv6NdraProfileParam, overrideParam)

	case utl.Global:
		client := c.Client.(client1.Ipv6NdraProfilesClient)
		gmObj, err := utl.ConvertModelBindingType(ipv6NdraProfileParam, model0.Ipv6NdraProfileBindingType(), model1.Ipv6NdraProfileBindingType())
		if err != nil {
			return obj, err
		}
		gmObj, err = client.Update(ndraProfileIdParam, gmObj.(model1.Ipv6NdraProfile), overrideParam)
		if err != nil {
			return obj, err
		}
		obj1, err1 := utl.ConvertModelBindingType(gmObj, model1.Ipv6NdraProfileBindingType(), model0.Ipv6NdraProfileBindingType())
		if err1 != nil {
			return obj, err1
		}
		obj = obj1.(model0.Ipv6NdraProfile)

	case utl.Multitenancy:
		client := c.Client.(client2.Ipv6NdraProfilesClient)
		obj, err = client.Update(utl.DefaultOrgID, c.ProjectID, ndraProfileIdParam, ipv6NdraProfileParam, overrideParam)

	default:
		err = errors.New("invalid infrastructure for model")
	}
	return obj, err
}

func (c Ipv6NdraProfileClientContext) Delete(ndraProfileIdParam string, overrideParam *bool) error {
	var err error

	switch c.ClientType {

	case utl.Local:
		client := c.Client.(client0.Ipv6NdraProfilesClient)
		err = client.Delete(ndraProfileIdParam, overrideParam)

	case utl.Global:
		client := c.Client.(client1.Ipv6NdraProfilesClient)
		err = client.Delete(ndraProfileIdParam, overrideParam)

	case utl.Multitenancy:
		client := c.Client.(client2.Ipv6NdraProfilesClient)
		err = client.Delete(utl.DefaultOrgID, c.ProjectID, ndraProfileIdParam, overrideParam)

	default:
		err = errors.New("invalid infrastructure for model")
	}
	return err
}

func (c Ipv6NdraProfileClientContext) List(cursorParam *string, includeMarkForDeleteObjectsParam *bool, includedFieldsParam *string, pageSizeParam *int64, sortAscendingParam *bool, sortByParam *string) (model0.Ipv6NdraProfileListResult, error) {
	var err error
	var obj model0.Ipv6NdraProfileListResult

	switch c.ClientType {

	case utl.Local:
		client := c.Client.(client0.Ipv6NdraProfilesClient)
		obj, err = client.List(cursorParam, includeMarkForDeleteObjectsParam, includedFieldsParam, pageSizeParam, sortAscendingParam, sortByParam)

	case utl.Global:
		client := c.Client.(client1.Ipv6NdraProfilesClient)
		gmObj, err := client.List(cursorParam, includeMarkForDeleteObjectsParam, includedFieldsParam, pageSizeParam, sortAscendingParam, sortByParam)
		if err != nil {
			return obj, err
		}
		obj1, err1 := utl.ConvertModelBindingType(gmObj, model1.Ipv6NdraProfileListResultBindingType(), model0.Ipv6NdraProfileListResultBindingType())
		if err1 != nil {
			return obj, err1
		}
		obj = obj1.(model0.Ipv6NdraProfileListResult)

	case utl.Multitenancy:
		client := c.Client.(client2.Ipv6NdraProfilesClient)
		obj, err = client.List(utl.DefaultOrgID, c.ProjectID, cursorParam, includeMarkForDeleteObjectsParam, includedFieldsParam, pageSizeParam, sortAscendingParam, sortByParam)

	default:
		err = errors.New("invalid infrastructure for model")
	}
	return obj, err
}
