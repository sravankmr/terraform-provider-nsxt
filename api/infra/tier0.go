//nolint:revive
package infra

// The following file has been autogenerated. Please avoid any changes!
import (
	"errors"

	vapiProtocolClient_ "github.com/vmware/vsphere-automation-sdk-go/runtime/protocol/client"
	client1 "github.com/vmware/vsphere-automation-sdk-go/services/nsxt-gm/global_infra"
	model1 "github.com/vmware/vsphere-automation-sdk-go/services/nsxt-gm/model"
	client0 "github.com/vmware/vsphere-automation-sdk-go/services/nsxt/infra"
	model0 "github.com/vmware/vsphere-automation-sdk-go/services/nsxt/model"

	utl "github.com/vmware/terraform-provider-nsxt/api/utl"
)

type Tier0ClientContext utl.ClientContext

func NewTier0sClient(sessionContext utl.SessionContext, connector vapiProtocolClient_.Connector) *Tier0ClientContext {
	var client interface{}

	switch sessionContext.ClientType {

	case utl.Local:
		client = client0.NewTier0sClient(connector)

	case utl.Global:
		client = client1.NewTier0sClient(connector)

	default:
		return nil
	}
	return &Tier0ClientContext{Client: client, ClientType: sessionContext.ClientType, ProjectID: sessionContext.ProjectID, VPCID: sessionContext.VPCID}
}

func (c Tier0ClientContext) Get(tier0IdParam string) (model0.Tier0, error) {
	var obj model0.Tier0
	var err error

	switch c.ClientType {

	case utl.Local:
		client := c.Client.(client0.Tier0sClient)
		obj, err = client.Get(tier0IdParam)
		if err != nil {
			return obj, err
		}

	case utl.Global:
		client := c.Client.(client1.Tier0sClient)
		gmObj, err1 := client.Get(tier0IdParam)
		if err1 != nil {
			return obj, err1
		}
		var rawObj interface{}
		rawObj, err = utl.ConvertModelBindingType(gmObj, model1.Tier0BindingType(), model0.Tier0BindingType())
		obj = rawObj.(model0.Tier0)

	default:
		return obj, errors.New("invalid infrastructure for model")
	}
	return obj, err
}

func (c Tier0ClientContext) Patch(tier0IdParam string, tier0Param model0.Tier0) error {
	var err error

	switch c.ClientType {

	case utl.Local:
		client := c.Client.(client0.Tier0sClient)
		err = client.Patch(tier0IdParam, tier0Param)

	case utl.Global:
		client := c.Client.(client1.Tier0sClient)
		gmObj, err1 := utl.ConvertModelBindingType(tier0Param, model0.Tier0BindingType(), model1.Tier0BindingType())
		if err1 != nil {
			return err1
		}
		err = client.Patch(tier0IdParam, gmObj.(model1.Tier0))

	default:
		err = errors.New("invalid infrastructure for model")
	}
	return err
}

func (c Tier0ClientContext) Update(tier0IdParam string, tier0Param model0.Tier0) (model0.Tier0, error) {
	var err error
	var obj model0.Tier0

	switch c.ClientType {

	case utl.Local:
		client := c.Client.(client0.Tier0sClient)
		obj, err = client.Update(tier0IdParam, tier0Param)

	case utl.Global:
		client := c.Client.(client1.Tier0sClient)
		gmObj, err := utl.ConvertModelBindingType(tier0Param, model0.Tier0BindingType(), model1.Tier0BindingType())
		if err != nil {
			return obj, err
		}
		gmObj, err = client.Update(tier0IdParam, gmObj.(model1.Tier0))
		if err != nil {
			return obj, err
		}
		obj1, err1 := utl.ConvertModelBindingType(gmObj, model1.Tier0BindingType(), model0.Tier0BindingType())
		if err1 != nil {
			return obj, err1
		}
		obj = obj1.(model0.Tier0)

	default:
		err = errors.New("invalid infrastructure for model")
	}
	return obj, err
}

func (c Tier0ClientContext) Delete(tier0IdParam string) error {
	var err error

	switch c.ClientType {

	case utl.Local:
		client := c.Client.(client0.Tier0sClient)
		err = client.Delete(tier0IdParam)

	case utl.Global:
		client := c.Client.(client1.Tier0sClient)
		err = client.Delete(tier0IdParam)

	default:
		err = errors.New("invalid infrastructure for model")
	}
	return err
}

func (c Tier0ClientContext) List(cursorParam *string, includeMarkForDeleteObjectsParam *bool, includedFieldsParam *string, pageSizeParam *int64, sortAscendingParam *bool, sortByParam *string) (model0.Tier0ListResult, error) {
	var err error
	var obj model0.Tier0ListResult

	switch c.ClientType {

	case utl.Local:
		client := c.Client.(client0.Tier0sClient)
		obj, err = client.List(cursorParam, includeMarkForDeleteObjectsParam, includedFieldsParam, pageSizeParam, sortAscendingParam, sortByParam)

	case utl.Global:
		client := c.Client.(client1.Tier0sClient)
		gmObj, err := client.List(cursorParam, includeMarkForDeleteObjectsParam, includedFieldsParam, pageSizeParam, sortAscendingParam, sortByParam)
		if err != nil {
			return obj, err
		}
		obj1, err1 := utl.ConvertModelBindingType(gmObj, model1.Tier0ListResultBindingType(), model0.Tier0ListResultBindingType())
		if err1 != nil {
			return obj, err1
		}
		obj = obj1.(model0.Tier0ListResult)

	default:
		err = errors.New("invalid infrastructure for model")
	}
	return obj, err
}
