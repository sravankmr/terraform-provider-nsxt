//nolint:revive
package customattributes

// The following file has been autogenerated. Please avoid any changes!
import (
	"errors"

	vapiProtocolClient_ "github.com/vmware/vsphere-automation-sdk-go/runtime/protocol/client"
	client1 "github.com/vmware/vsphere-automation-sdk-go/services/nsxt-gm/global_infra/context_profiles/custom_attributes"
	model1 "github.com/vmware/vsphere-automation-sdk-go/services/nsxt-gm/model"
	client0 "github.com/vmware/vsphere-automation-sdk-go/services/nsxt/infra/context_profiles/custom_attributes"
	model0 "github.com/vmware/vsphere-automation-sdk-go/services/nsxt/model"
	client2 "github.com/vmware/vsphere-automation-sdk-go/services/nsxt/orgs/projects/infra/context_profiles/custom_attributes"

	utl "github.com/vmware/terraform-provider-nsxt/api/utl"
)

type PolicyCustomAttributesClientContext utl.ClientContext

func NewDefaultClient(sessionContext utl.SessionContext, connector vapiProtocolClient_.Connector) *PolicyCustomAttributesClientContext {
	var client interface{}

	switch sessionContext.ClientType {

	case utl.Local:
		client = client0.NewDefaultClient(connector)

	case utl.Global:
		client = client1.NewDefaultClient(connector)

	case utl.Multitenancy:
		client = client2.NewDefaultClient(connector)

	default:
		return nil
	}
	return &PolicyCustomAttributesClientContext{Client: client, ClientType: sessionContext.ClientType, ProjectID: sessionContext.ProjectID, VPCID: sessionContext.VPCID}
}

func (c PolicyCustomAttributesClientContext) Create(policyCustomAttributesParam model0.PolicyCustomAttributes, actionParam string) error {
	var err error

	switch c.ClientType {

	case utl.Local:
		client := c.Client.(client0.DefaultClient)
		err = client.Create(policyCustomAttributesParam, actionParam)

	case utl.Global:
		client := c.Client.(client1.DefaultClient)
		gmObj, err1 := utl.ConvertModelBindingType(policyCustomAttributesParam, model0.PolicyCustomAttributesBindingType(), model1.PolicyCustomAttributesBindingType())
		if err1 != nil {
			return err1
		}
		err = client.Create(gmObj.(model1.PolicyCustomAttributes), actionParam)

	case utl.Multitenancy:
		client := c.Client.(client2.DefaultClient)
		err = client.Create(utl.DefaultOrgID, c.ProjectID, policyCustomAttributesParam, actionParam)

	default:
		err = errors.New("invalid infrastructure for model")
	}
	return err
}

func (c PolicyCustomAttributesClientContext) List(attributeKeyParam *string, attributeSourceParam *string, cursorParam *string, includeMarkForDeleteObjectsParam *bool, includedFieldsParam *string, pageSizeParam *int64, sortAscendingParam *bool, sortByParam *string) (model0.PolicyContextProfileListResult, error) {
	var err error
	var obj model0.PolicyContextProfileListResult

	switch c.ClientType {

	case utl.Local:
		client := c.Client.(client0.DefaultClient)
		obj, err = client.List(attributeKeyParam, attributeSourceParam, cursorParam, includeMarkForDeleteObjectsParam, includedFieldsParam, pageSizeParam, sortAscendingParam, sortByParam)

	case utl.Global:
		client := c.Client.(client1.DefaultClient)
		gmObj, err := client.List(attributeKeyParam, attributeSourceParam, cursorParam, includeMarkForDeleteObjectsParam, includedFieldsParam, pageSizeParam, sortAscendingParam, sortByParam)
		if err != nil {
			return obj, err
		}
		obj1, err1 := utl.ConvertModelBindingType(gmObj, model1.PolicyContextProfileListResultBindingType(), model0.PolicyContextProfileListResultBindingType())
		if err1 != nil {
			return obj, err1
		}
		obj = obj1.(model0.PolicyContextProfileListResult)

	case utl.Multitenancy:
		client := c.Client.(client2.DefaultClient)
		obj, err = client.List(utl.DefaultOrgID, c.ProjectID, attributeKeyParam, attributeSourceParam, cursorParam, includeMarkForDeleteObjectsParam, includedFieldsParam, pageSizeParam, sortAscendingParam, sortByParam)

	default:
		err = errors.New("invalid infrastructure for model")
	}
	return obj, err
}

func (c PolicyCustomAttributesClientContext) Patch(policyCustomAttributesParam model0.PolicyCustomAttributes) error {
	var err error

	switch c.ClientType {

	case utl.Local:
		client := c.Client.(client0.DefaultClient)
		err = client.Patch(policyCustomAttributesParam)

	case utl.Global:
		client := c.Client.(client1.DefaultClient)
		gmObj, err1 := utl.ConvertModelBindingType(policyCustomAttributesParam, model0.PolicyCustomAttributesBindingType(), model1.PolicyCustomAttributesBindingType())
		if err1 != nil {
			return err1
		}
		err = client.Patch(gmObj.(model1.PolicyCustomAttributes))

	case utl.Multitenancy:
		client := c.Client.(client2.DefaultClient)
		err = client.Patch(utl.DefaultOrgID, c.ProjectID, policyCustomAttributesParam)

	default:
		err = errors.New("invalid infrastructure for model")
	}
	return err
}
