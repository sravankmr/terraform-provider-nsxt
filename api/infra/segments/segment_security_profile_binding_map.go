//nolint:revive
package segments

// The following file has been autogenerated. Please avoid any changes!
import (
	"errors"

	vapiProtocolClient_ "github.com/vmware/vsphere-automation-sdk-go/runtime/protocol/client"
	client0 "github.com/vmware/vsphere-automation-sdk-go/services/nsxt/infra/segments"
	model0 "github.com/vmware/vsphere-automation-sdk-go/services/nsxt/model"
	client1 "github.com/vmware/vsphere-automation-sdk-go/services/nsxt/orgs/projects/infra/segments"

	utl "github.com/vmware/terraform-provider-nsxt/api/utl"
)

type SegmentSecurityProfileBindingMapClientContext utl.ClientContext

func NewSegmentSecurityProfileBindingMapsClient(sessionContext utl.SessionContext, connector vapiProtocolClient_.Connector) *SegmentSecurityProfileBindingMapClientContext {
	var client interface{}

	switch sessionContext.ClientType {

	case utl.Local:
		client = client0.NewSegmentSecurityProfileBindingMapsClient(connector)

	case utl.Multitenancy:
		client = client1.NewSegmentSecurityProfileBindingMapsClient(connector)

	default:
		return nil
	}
	return &SegmentSecurityProfileBindingMapClientContext{Client: client, ClientType: sessionContext.ClientType, ProjectID: sessionContext.ProjectID, VPCID: sessionContext.VPCID}
}

func (c SegmentSecurityProfileBindingMapClientContext) Get(segmentIdParam string, segmentSecurityProfileBindingMapIdParam string) (model0.SegmentSecurityProfileBindingMap, error) {
	var obj model0.SegmentSecurityProfileBindingMap
	var err error

	switch c.ClientType {

	case utl.Local:
		client := c.Client.(client0.SegmentSecurityProfileBindingMapsClient)
		obj, err = client.Get(segmentIdParam, segmentSecurityProfileBindingMapIdParam)
		if err != nil {
			return obj, err
		}

	case utl.Multitenancy:
		client := c.Client.(client1.SegmentSecurityProfileBindingMapsClient)
		obj, err = client.Get(utl.DefaultOrgID, c.ProjectID, segmentIdParam, segmentSecurityProfileBindingMapIdParam)
		if err != nil {
			return obj, err
		}

	default:
		return obj, errors.New("invalid infrastructure for model")
	}
	return obj, err
}

func (c SegmentSecurityProfileBindingMapClientContext) Delete(segmentIdParam string, segmentSecurityProfileBindingMapIdParam string) error {
	var err error

	switch c.ClientType {

	case utl.Local:
		client := c.Client.(client0.SegmentSecurityProfileBindingMapsClient)
		err = client.Delete(segmentIdParam, segmentSecurityProfileBindingMapIdParam)

	case utl.Multitenancy:
		client := c.Client.(client1.SegmentSecurityProfileBindingMapsClient)
		err = client.Delete(utl.DefaultOrgID, c.ProjectID, segmentIdParam, segmentSecurityProfileBindingMapIdParam)

	default:
		err = errors.New("invalid infrastructure for model")
	}
	return err
}

func (c SegmentSecurityProfileBindingMapClientContext) Patch(segmentIdParam string, segmentSecurityProfileBindingMapIdParam string, segmentSecurityProfileBindingMapParam model0.SegmentSecurityProfileBindingMap) error {
	var err error

	switch c.ClientType {

	case utl.Local:
		client := c.Client.(client0.SegmentSecurityProfileBindingMapsClient)
		err = client.Patch(segmentIdParam, segmentSecurityProfileBindingMapIdParam, segmentSecurityProfileBindingMapParam)

	case utl.Multitenancy:
		client := c.Client.(client1.SegmentSecurityProfileBindingMapsClient)
		err = client.Patch(utl.DefaultOrgID, c.ProjectID, segmentIdParam, segmentSecurityProfileBindingMapIdParam, segmentSecurityProfileBindingMapParam)

	default:
		err = errors.New("invalid infrastructure for model")
	}
	return err
}

func (c SegmentSecurityProfileBindingMapClientContext) Update(segmentIdParam string, segmentSecurityProfileBindingMapIdParam string, segmentSecurityProfileBindingMapParam model0.SegmentSecurityProfileBindingMap) (model0.SegmentSecurityProfileBindingMap, error) {
	var err error
	var obj model0.SegmentSecurityProfileBindingMap

	switch c.ClientType {

	case utl.Local:
		client := c.Client.(client0.SegmentSecurityProfileBindingMapsClient)
		obj, err = client.Update(segmentIdParam, segmentSecurityProfileBindingMapIdParam, segmentSecurityProfileBindingMapParam)

	case utl.Multitenancy:
		client := c.Client.(client1.SegmentSecurityProfileBindingMapsClient)
		obj, err = client.Update(utl.DefaultOrgID, c.ProjectID, segmentIdParam, segmentSecurityProfileBindingMapIdParam, segmentSecurityProfileBindingMapParam)

	default:
		err = errors.New("invalid infrastructure for model")
	}
	return obj, err
}

func (c SegmentSecurityProfileBindingMapClientContext) List(segmentIdParam string, cursorParam *string, includedFieldsParam *string, pageSizeParam *int64, sortAscendingParam *bool, sortByParam *string) (model0.SegmentSecurityProfileBindingMapListResult, error) {
	var err error
	var obj model0.SegmentSecurityProfileBindingMapListResult

	switch c.ClientType {

	case utl.Local:
		client := c.Client.(client0.SegmentSecurityProfileBindingMapsClient)
		obj, err = client.List(segmentIdParam, cursorParam, includedFieldsParam, pageSizeParam, sortAscendingParam, sortByParam)

	case utl.Multitenancy:
		client := c.Client.(client1.SegmentSecurityProfileBindingMapsClient)
		obj, err = client.List(utl.DefaultOrgID, c.ProjectID, segmentIdParam, cursorParam, includedFieldsParam, pageSizeParam, sortAscendingParam, sortByParam)

	default:
		err = errors.New("invalid infrastructure for model")
	}
	return obj, err
}
