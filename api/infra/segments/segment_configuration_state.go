//nolint:revive
package segments

// The following file has been autogenerated. Please avoid any changes!
import (
	"errors"

	vapiProtocolClient_ "github.com/vmware/vsphere-automation-sdk-go/runtime/protocol/client"
	client1 "github.com/vmware/vsphere-automation-sdk-go/services/nsxt-gm/global_infra/segments"
	model1 "github.com/vmware/vsphere-automation-sdk-go/services/nsxt-gm/model"
	client0 "github.com/vmware/vsphere-automation-sdk-go/services/nsxt/infra/segments"
	model0 "github.com/vmware/vsphere-automation-sdk-go/services/nsxt/model"
	client2 "github.com/vmware/vsphere-automation-sdk-go/services/nsxt/orgs/projects/infra/segments"

	utl "github.com/vmware/terraform-provider-nsxt/api/utl"
)

type SegmentConfigurationStateClientContext utl.ClientContext

func NewStateClient(sessionContext utl.SessionContext, connector vapiProtocolClient_.Connector) *SegmentConfigurationStateClientContext {
	var client interface{}

	switch sessionContext.ClientType {

	case utl.Local:
		client = client0.NewStateClient(connector)

	case utl.Global:
		client = client1.NewStateClient(connector)

	case utl.Multitenancy:
		client = client2.NewStateClient(connector)

	default:
		return nil
	}
	return &SegmentConfigurationStateClientContext{Client: client, ClientType: sessionContext.ClientType, ProjectID: sessionContext.ProjectID, VPCID: sessionContext.VPCID}
}

func (c SegmentConfigurationStateClientContext) Get(segmentsIdParam string, cursorParam *string, edgePathParam *string, enforcementPointPathParam *string, includeMarkForDeleteObjectsParam *bool, includedFieldsParam *string, pageSizeParam *int64, sortAscendingParam *bool, sortByParam *string, sourceParam *string, statsTypeParam *string, transportNodeIdParam *string) (model0.SegmentConfigurationState, error) {
	var obj model0.SegmentConfigurationState
	var err error

	switch c.ClientType {

	case utl.Local:
		client := c.Client.(client0.StateClient)
		obj, err = client.Get(segmentsIdParam, nil, cursorParam, edgePathParam, enforcementPointPathParam, includeMarkForDeleteObjectsParam, includedFieldsParam, pageSizeParam, sortAscendingParam, sortByParam, sourceParam, statsTypeParam, transportNodeIdParam)
		if err != nil {
			return obj, err
		}

	case utl.Global:
		client := c.Client.(client1.StateClient)
		gmObj, err1 := client.Get(segmentsIdParam, cursorParam, edgePathParam, enforcementPointPathParam, includeMarkForDeleteObjectsParam, includedFieldsParam, pageSizeParam, sortAscendingParam, sortByParam, sourceParam, statsTypeParam, transportNodeIdParam)
		if err1 != nil {
			return obj, err1
		}
		var rawObj interface{}
		rawObj, err = utl.ConvertModelBindingType(gmObj, model1.SegmentConfigurationStateBindingType(), model0.SegmentConfigurationStateBindingType())
		obj = rawObj.(model0.SegmentConfigurationState)

	case utl.Multitenancy:
		client := c.Client.(client2.StateClient)
		obj, err = client.Get(utl.DefaultOrgID, c.ProjectID, segmentsIdParam, nil, cursorParam, edgePathParam, enforcementPointPathParam, includeMarkForDeleteObjectsParam, includedFieldsParam, pageSizeParam, sortAscendingParam, sortByParam, sourceParam, statsTypeParam, transportNodeIdParam)
		if err != nil {
			return obj, err
		}

	default:
		return obj, errors.New("invalid infrastructure for model")
	}
	return obj, err
}

func (c SegmentConfigurationStateClientContext) List(configurationStateParam *string, enforcementPointPathParam *string, sourceParam *string) (model0.SegmentConfigurationStateListResult, error) {
	var err error
	var obj model0.SegmentConfigurationStateListResult

	switch c.ClientType {

	case utl.Local:
		client := c.Client.(client0.StateClient)
		obj, err = client.List(configurationStateParam, enforcementPointPathParam, sourceParam)

	case utl.Global:
		client := c.Client.(client1.StateClient)
		gmObj, err := client.List(configurationStateParam, enforcementPointPathParam, sourceParam)
		if err != nil {
			return obj, err
		}
		obj1, err1 := utl.ConvertModelBindingType(gmObj, model1.SegmentConfigurationStateListResultBindingType(), model0.SegmentConfigurationStateListResultBindingType())
		if err1 != nil {
			return obj, err1
		}
		obj = obj1.(model0.SegmentConfigurationStateListResult)

	case utl.Multitenancy:
		client := c.Client.(client2.StateClient)
		obj, err = client.List(utl.DefaultOrgID, c.ProjectID, configurationStateParam, enforcementPointPathParam, sourceParam)

	default:
		err = errors.New("invalid infrastructure for model")
	}
	return obj, err
}
