//nolint:revive
package security

// The following file has been autogenerated. Please avoid any changes!
import (
	"errors"

	vapiProtocolClient_ "github.com/vmware/vsphere-automation-sdk-go/runtime/protocol/client"
	client1 "github.com/vmware/vsphere-automation-sdk-go/services/nsxt-gm/global_infra/settings/firewall/security"
	model1 "github.com/vmware/vsphere-automation-sdk-go/services/nsxt-gm/model"
	client0 "github.com/vmware/vsphere-automation-sdk-go/services/nsxt/infra/settings/firewall/security"
	model0 "github.com/vmware/vsphere-automation-sdk-go/services/nsxt/model"

	utl "github.com/vmware/terraform-provider-nsxt/api/utl"
)

type PolicyExcludeListClientContext utl.ClientContext

func NewExcludeListClient(sessionContext utl.SessionContext, connector vapiProtocolClient_.Connector) *PolicyExcludeListClientContext {
	var client interface{}

	switch sessionContext.ClientType {

	case utl.Local:
		client = client0.NewExcludeListClient(connector)

	case utl.Global:
		client = client1.NewExcludeListClient(connector)

	default:
		return nil
	}
	return &PolicyExcludeListClientContext{Client: client, ClientType: sessionContext.ClientType, ProjectID: sessionContext.ProjectID, VPCID: sessionContext.VPCID}
}

func (c PolicyExcludeListClientContext) Get() (model0.PolicyExcludeList, error) {
	var obj model0.PolicyExcludeList
	var err error

	switch c.ClientType {

	case utl.Local:
		client := c.Client.(client0.ExcludeListClient)
		obj, err = client.Get()
		if err != nil {
			return obj, err
		}

	case utl.Global:
		client := c.Client.(client1.ExcludeListClient)
		gmObj, err1 := client.Get()
		if err1 != nil {
			return obj, err1
		}
		var rawObj interface{}
		rawObj, err = utl.ConvertModelBindingType(gmObj, model1.PolicyExcludeListBindingType(), model0.PolicyExcludeListBindingType())
		obj = rawObj.(model0.PolicyExcludeList)

	default:
		return obj, errors.New("invalid infrastructure for model")
	}
	return obj, err
}

func (c PolicyExcludeListClientContext) Patch(policyExcludeListParam model0.PolicyExcludeList) error {
	var err error

	switch c.ClientType {

	case utl.Local:
		client := c.Client.(client0.ExcludeListClient)
		err = client.Patch(policyExcludeListParam)

	case utl.Global:
		client := c.Client.(client1.ExcludeListClient)
		gmObj, err1 := utl.ConvertModelBindingType(policyExcludeListParam, model0.PolicyExcludeListBindingType(), model1.PolicyExcludeListBindingType())
		if err1 != nil {
			return err1
		}
		err = client.Patch(gmObj.(model1.PolicyExcludeList))

	default:
		err = errors.New("invalid infrastructure for model")
	}
	return err
}

func (c PolicyExcludeListClientContext) Update(policyExcludeListParam model0.PolicyExcludeList) (model0.PolicyExcludeList, error) {
	var err error
	var obj model0.PolicyExcludeList

	switch c.ClientType {

	case utl.Local:
		client := c.Client.(client0.ExcludeListClient)
		obj, err = client.Update(policyExcludeListParam)

	case utl.Global:
		client := c.Client.(client1.ExcludeListClient)
		gmObj, err := utl.ConvertModelBindingType(policyExcludeListParam, model0.PolicyExcludeListBindingType(), model1.PolicyExcludeListBindingType())
		if err != nil {
			return obj, err
		}
		gmObj, err = client.Update(gmObj.(model1.PolicyExcludeList))
		if err != nil {
			return obj, err
		}
		obj1, err1 := utl.ConvertModelBindingType(gmObj, model1.PolicyExcludeListBindingType(), model0.PolicyExcludeListBindingType())
		if err1 != nil {
			return obj, err1
		}
		obj = obj1.(model0.PolicyExcludeList)

	default:
		err = errors.New("invalid infrastructure for model")
	}
	return obj, err
}
