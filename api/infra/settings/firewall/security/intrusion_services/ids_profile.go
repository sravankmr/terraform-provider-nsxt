//nolint:revive
package intrusionservices

// The following file has been autogenerated. Please avoid any changes!
import (
	"errors"

	vapiProtocolClient_ "github.com/vmware/vsphere-automation-sdk-go/runtime/protocol/client"
	client0 "github.com/vmware/vsphere-automation-sdk-go/services/nsxt/infra/settings/firewall/security/intrusion_services"
	model0 "github.com/vmware/vsphere-automation-sdk-go/services/nsxt/model"
	client1 "github.com/vmware/vsphere-automation-sdk-go/services/nsxt/orgs/projects/infra/settings/firewall/security/intrusion_services"

	utl "github.com/vmware/terraform-provider-nsxt/api/utl"
)

type IdsProfileClientContext utl.ClientContext

func NewProfilesClient(sessionContext utl.SessionContext, connector vapiProtocolClient_.Connector) *IdsProfileClientContext {
	var client interface{}

	switch sessionContext.ClientType {

	case utl.Local:
		client = client0.NewProfilesClient(connector)

	case utl.Multitenancy:
		client = client1.NewProfilesClient(connector)

	default:
		return nil
	}
	return &IdsProfileClientContext{Client: client, ClientType: sessionContext.ClientType, ProjectID: sessionContext.ProjectID, VPCID: sessionContext.VPCID}
}

func (c IdsProfileClientContext) Get(profileIdParam string) (model0.IdsProfile, error) {
	var obj model0.IdsProfile
	var err error

	switch c.ClientType {

	case utl.Local:
		client := c.Client.(client0.ProfilesClient)
		obj, err = client.Get(profileIdParam)
		if err != nil {
			return obj, err
		}

	case utl.Multitenancy:
		client := c.Client.(client1.ProfilesClient)
		obj, err = client.Get(utl.DefaultOrgID, c.ProjectID, profileIdParam)
		if err != nil {
			return obj, err
		}

	default:
		return obj, errors.New("invalid infrastructure for model")
	}
	return obj, err
}

func (c IdsProfileClientContext) Delete(profileIdParam string) error {
	var err error

	switch c.ClientType {

	case utl.Local:
		client := c.Client.(client0.ProfilesClient)
		err = client.Delete(profileIdParam)

	case utl.Multitenancy:
		client := c.Client.(client1.ProfilesClient)
		err = client.Delete(utl.DefaultOrgID, c.ProjectID, profileIdParam)

	default:
		err = errors.New("invalid infrastructure for model")
	}
	return err
}

func (c IdsProfileClientContext) List(cursorParam *string, includeMarkForDeleteObjectsParam *bool, includedFieldsParam *string, pageSizeParam *int64, sortAscendingParam *bool, sortByParam *string) (model0.IdsProfileListResult, error) {
	var err error
	var obj model0.IdsProfileListResult

	switch c.ClientType {

	case utl.Local:
		client := c.Client.(client0.ProfilesClient)
		obj, err = client.List(cursorParam, includeMarkForDeleteObjectsParam, includedFieldsParam, pageSizeParam, sortAscendingParam, sortByParam)

	case utl.Multitenancy:
		client := c.Client.(client1.ProfilesClient)
		obj, err = client.List(utl.DefaultOrgID, c.ProjectID, cursorParam, includeMarkForDeleteObjectsParam, includedFieldsParam, pageSizeParam, sortAscendingParam, sortByParam)

	default:
		err = errors.New("invalid infrastructure for model")
	}
	return obj, err
}

func (c IdsProfileClientContext) Patch(profileIdParam string, idsProfileParam model0.IdsProfile) error {
	var err error

	switch c.ClientType {

	case utl.Local:
		client := c.Client.(client0.ProfilesClient)
		err = client.Patch(profileIdParam, idsProfileParam)

	case utl.Multitenancy:
		client := c.Client.(client1.ProfilesClient)
		err = client.Patch(utl.DefaultOrgID, c.ProjectID, profileIdParam, idsProfileParam)

	default:
		err = errors.New("invalid infrastructure for model")
	}
	return err
}

func (c IdsProfileClientContext) Update(profileIdParam string, idsProfileParam model0.IdsProfile) (model0.IdsProfile, error) {
	var err error
	var obj model0.IdsProfile

	switch c.ClientType {

	case utl.Local:
		client := c.Client.(client0.ProfilesClient)
		obj, err = client.Update(profileIdParam, idsProfileParam)

	case utl.Multitenancy:
		client := c.Client.(client1.ProfilesClient)
		obj, err = client.Update(utl.DefaultOrgID, c.ProjectID, profileIdParam, idsProfileParam)

	default:
		err = errors.New("invalid infrastructure for model")
	}
	return obj, err
}
